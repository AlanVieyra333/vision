PROJ= Trabajo7
MAIN= main
OS := $(shell uname -s)
OPENCV_LIBS=-lopencv_core -lopencv_imgproc -lopencv_videoio -lopencv_imgcodecs
APPS= test/classifier.a test/hu-moments.a

ifeq ($(OS), Linux)
build: ${PROJ} ${APPS}

run: build
	./${PROJ}

${PROJ}: ${MAIN}.cpp Makefile ./lib/*.cpp ./include/*.hpp ./lib/**/*.cpp ./include/**/*.hpp ./lib/**/*.cc ./include/**/*.h
	make
	@echo ">>> $@ compilado correctamente.\n"
endif

ifeq ($(OS), Darwin)
build: ${PROJ}.app/Contents/MacOS/${PROJ} ${APPS}

run: build
	./${PROJ}.app/Contents/MacOS/${PROJ}

${PROJ}.app/Contents/MacOS/${PROJ}: ${MAIN}.cpp Makefile ./lib/*.cpp ./include/*.hpp ./lib/**/*.cpp ./include/**/*.hpp ./lib/**/*.cc ./include/**/*.h
	make
	@echo "\n>>> $@ compilado correctamente.\n"
endif

Makefile: ${MAIN}.pro
	qmake ${MAIN}.pro

test/hu-moments.a: test/hu-moments.cpp image_process.o utils.o
	g++ -O3 -Iinclude -o $@ $< image_process.o utils.o $(OPENCV_LIBS)
	@echo ">>> $@ compilado correctamente."
	@echo "Use example: test/hu-moments.a images/circulo 2\n"

test/classifier.a: test/classifier.cpp image_process.o image_classifier.o utils.o reconoce.o triangles.o follow.o lambdaMatrix.o
	g++ -O3 -Iinclude -Iinclude/marker -o $@ $< image_process.o image_classifier.o utils.o reconoce.o triangles.o follow.o lambdaMatrix.o $(OPENCV_LIBS)
	@echo ">>> $@ compilado correctamente."
	@echo "Use example: test/classifier.a images/circulo/imagen1.png\n"

clean:
	rm -f *.a *.o **/*.o *.txt
	rm -f .qmake.stash moc_*
	rm -f Makefile
	rm -f ${PROJ}
	rm -rf ${PROJ}.app

.PHONY: build run clean
